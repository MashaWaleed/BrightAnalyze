
name: Build Cross-Platform Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  APP_VERSION: '1.0'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build Windows executable
      run: |
        pyinstaller CANAnalyzer-Linux.spec --distpath dist-windows --workpath build-windows
        
    - name: Rename Windows executable
      run: |
        Move-Item "dist-windows\CANAnalyzer-Linux\CANAnalyzer-Linux.exe" "dist-windows\CANAnalyzer-Windows.exe" -ErrorAction SilentlyContinue
        if (Test-Path "dist-windows\CANAnalyzer-Linux") { Remove-Item "dist-windows\CANAnalyzer-Linux" -Recurse -Force }
    
    - name: Create Windows package
      run: |
        New-Item -ItemType Directory -Name "CANAnalyzer-Windows-Portable" -Force
        Copy-Item "dist-windows\CANAnalyzer-Windows.exe" "CANAnalyzer-Windows-Portable\" -ErrorAction SilentlyContinue
        
        $readme = @"
        # CAN Analyzer for Windows
        
        ## Quick Start:
        1. Double-click CANAnalyzer-Windows.exe to run
        2. Connect your CANable device
        3. Select "SLCAN" driver and COM port
        4. Click Connect!
        
        ## Features:
        - CANable USB-to-CAN support
        - Professional UDS diagnostics  
        - Real-time signal plotting
        - DBC file management
        - Cross-platform compatibility
        
        ## Supported Hardware:
        - CANable with SLCAN firmware
        - Vector VN series
        - PEAK PCAN-USB
        - Kvaser Leaf
        
        ## System Requirements:
        - Windows 10/11 (64-bit)
        - USB-to-CAN adapter
        - No additional software required
        "@
        $readme | Out-File -FilePath "CANAnalyzer-Windows-Portable\README.txt" -Encoding UTF8
        
        Compress-Archive -Path "CANAnalyzer-Windows-Portable" -DestinationPath "CANAnalyzer-Windows-v${{ env.APP_VERSION }}.zip" -Force
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CANAnalyzer-Windows
        path: |
          CANAnalyzer-Windows-v${{ env.APP_VERSION }}.zip
          dist-windows/CANAnalyzer-Windows.exe
        retention-days: 90

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
          libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 \
          libfontconfig1 libxcb-shape0 libxcb-cursor0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build Linux executable
      run: |
        pyinstaller CANAnalyzer-Linux.spec
        
    - name: Make executable
      run: |
        chmod +x dist/CANAnalyzer-Linux
        
    - name: Create Linux package
      run: |
        mkdir -p CANAnalyzer-Linux-Portable
        cp dist/CANAnalyzer-Linux CANAnalyzer-Linux-Portable/
        
        cat > CANAnalyzer-Linux-Portable/README.txt << 'EOF'
        # CAN Analyzer for Linux
        
        ## Quick Start:
        1. Make executable: chmod +x CANAnalyzer-Linux
        2. Run: ./CANAnalyzer-Linux
        3. Connect your CANable device
        4. Select "SLCAN" driver and /dev/ttyACM0
        5. Click Connect!
        
        ## Features:
        - CANable USB-to-CAN support
        - SocketCAN native integration
        - Professional UDS diagnostics
        - Real-time signal plotting
        - DBC file management
        
        ## Supported Hardware:
        - CANable with SLCAN firmware
        - SocketCAN compatible devices
        - Virtual CAN for testing
        
        ## System Requirements:
        - Linux (Ubuntu 18.04+, CentOS 8+)
        - libQt6 libraries (usually pre-installed)
        - USB-to-CAN adapter or SocketCAN interface
        
        ## SocketCAN Setup (Optional):
        sudo modprobe vcan
        sudo ip link add dev vcan0 type vcan
        sudo ip link set up vcan0
        
        ## Permissions (if needed):
        sudo usermod -a -G dialout $USER
        EOF
        
        tar -czf CANAnalyzer-Linux-v${{ env.APP_VERSION }}.tar.gz CANAnalyzer-Linux-Portable/
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CANAnalyzer-Linux
        path: |
          CANAnalyzer-Linux-v${{ env.APP_VERSION }}.tar.gz
          dist/CANAnalyzer-Linux
        retention-days: 90

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: CANAnalyzer-Windows
        path: windows-artifacts/
        
    - name: Download Linux artifacts  
      uses: actions/download-artifact@v4
      with:
        name: CANAnalyzer-Linux
        path: linux-artifacts/
        
    - name: Generate release tag
      id: release_tag
      run: |
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=v${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        fi
        
    - name: Delete existing release (if exists)
      run: |
        gh release delete ${{ steps.release_tag.outputs.tag }} --yes || true
        git tag -d ${{ steps.release_tag.outputs.tag }} || true
        git push origin :refs/tags/${{ steps.release_tag.outputs.tag }} || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_tag.outputs.tag }}
        name: Professional CAN Bus Analyzer ${{ steps.release_tag.outputs.tag }}
        body: |
          ## üöó Professional CAN Bus Analyzer - Cross-Platform Release
          
          ### ‚ú® **New Features:**
          - üîå **CANable Support** - Native SLCAN integration for CANable hardware
          - üõ†Ô∏è **Enhanced UDS** - Professional diagnostic capabilities with security access
          - üìä **Signal Plotting** - Real-time visualization of CAN signals
          - üé® **Modern UI** - Dark/light themes with professional layout
          - üìÅ **DBC Management** - Complete database file support
          
          ### üì¶ **Downloads:**
          
          #### **Windows (Recommended)**
          - **CANAnalyzer-Windows.exe** - Single executable (run directly)
          - **CANAnalyzer-Windows-v${{ env.APP_VERSION }}.zip** - Portable package with documentation
          
          #### **Linux**  
          - **CANAnalyzer-Linux** - Single executable (chmod +x required)
          - **CANAnalyzer-Linux-v${{ env.APP_VERSION }}.tar.gz** - Complete package with setup guide
          
          ### üîå **Supported Hardware:**
          - **CANable** - USB-to-CAN with SLCAN firmware ‚≠ê (recommended)
          - **SocketCAN** - Native Linux CAN interfaces
          - **Vector** - VN series, CANcaseXL
          - **PEAK** - PCAN-USB, PCAN-PCIe
          - **Kvaser** - Leaf, USBcan Pro
          - **Virtual CAN** - Testing and simulation
          
          ### üöÄ **Quick Start:**
          1. Download executable for your platform
          2. Connect CANable device
          3. Run application
          4. Select "SLCAN" interface
          5. Choose COM port (Windows) or /dev/ttyACM0 (Linux)
          6. Set bitrate and connect!
          
          ### üíª **System Requirements:**
          - **Windows**: 10/11 (64-bit), no additional software needed
          - **Linux**: Ubuntu 18.04+, libQt6 (usually pre-installed)
          - **Hardware**: CANable or compatible USB-to-CAN adapter
          
          ### üìñ **Documentation:**
          - [Complete User Guide](https://github.com/MashaWaleed/BrightAnalyze/blob/main/CAN_ANALYZER_USER_GUIDE.md)
          - [Video Tutorial](https://youtu.be/YOUR_VIDEO_ID)
          - [Hardware Setup Guide](https://github.com/MashaWaleed/BrightAnalyze#-hardware-configuration)
          
          ---
          
          **üîß Built for automotive professionals** | **üåü Open source** | **‚ù§Ô∏è Community driven**
        files: |
          windows-artifacts/CANAnalyzer-Windows-v${{ env.APP_VERSION }}.zip
          windows-artifacts/CANAnalyzer-Windows.exe
          linux-artifacts/CANAnalyzer-Linux-v${{ env.APP_VERSION }}.tar.gz  
          linux-artifacts/CANAnalyzer-Linux
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
